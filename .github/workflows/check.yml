name: Check
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  merge_group:
  schedule:
    - cron: "26 3 * * *" # 03:26 UTC
env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  check:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        # Keep low end in sync with Cargo.toml
        rust-toolchain: [1.76.0, stable, nightly]
        type: [debug]
        include:
          - os: ubuntu-latest
            rust-toolchain: stable
            type: release
          - os: macos-latest
            rust-toolchain: stable
            type: release
          - os: windows-latest
            rust-toolchain: stable
            type: release
          - os: ubuntu-20.04
            rust-toolchain: stable
            type: debug
          - os: macos-12
            rust-toolchain: stable
            type: debug
          - os: windows-2019
            rust-toolchain: stable
            type: debug
    env:
      BUILD_TYPE: ${{ matrix.type == 'release' && '--release' || '' }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0

      - uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0
        with:
          repository: mozilla/neqo
          sparse-checkout: |
            .github/actions/rust
          path: neqo
      - uses: ./neqo/.github/actions/rust
        with:
          version: ${{ matrix.rust-toolchain }}
          components: ${{ matrix.rust-toolchain == 'stable' && 'llvm-tools-preview' || '' }} ${{ matrix.rust-toolchain == 'nightly' && 'rust-src' || '' }}
          tools: ${{ matrix.rust-toolchain == 'stable' && 'cargo-llvm-cov, ' || '' }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check
        run: |
          # shellcheck disable=SC2086
          cargo +${{ matrix.rust-toolchain }} check $BUILD_TYPE --all-targets

      - name: Run tests and determine coverage
        env:
          RUST_LOG: trace
        run: |
          # shellcheck disable=SC2086
          if [ "${{ matrix.rust-toolchain }}" == "stable" ] && [ "${{ matrix.type }}" == "debug" ] && [ "${{endsWith(matrix.os, '-latest') && 'latest' || '' }}" == "latest" ]; then
            cargo +${{ matrix.rust-toolchain }} llvm-cov test $BUILD_TYPE --no-fail-fast --lcov --output-path lcov.info
          else
            if [ "${{ startsWith(matrix.os, 'windows') && 'windows' || '' }}" == "windows" ]; then
              # The codegen_windows_bindings test only succeeds when run via llvm-cov?!
              export FILTER="-- --skip codegen_windows_bindings"
            fi
            cargo +${{ matrix.rust-toolchain }} test $BUILD_TYPE --no-fail-fast $FILTER
          fi
          cargo +${{ matrix.rust-toolchain }} bench --no-run
      - uses: codecov/codecov-action@b9fd7d16f6d7d1b5d2bec1a2887e65ceed900238 # v4.6.0
        with:
          file: lcov.info
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        if: matrix.type == 'debug' && matrix.rust-toolchain == 'stable' && endsWith(matrix.os, '-latest')

      - name: Run tests with sanitizers
        if: (matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest') && matrix.rust-toolchain == 'nightly'
        env:
          RUST_LOG: trace
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            TARGET="x86_64-unknown-linux-gnu"
            SANITIZERS="address thread leak memory"
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            TARGET="aarch64-apple-darwin"
            # no memory and leak sanitizer support yet
            SANITIZERS="address thread"
          fi
          for sanitizer in $SANITIZERS; do
            echo "Running tests with $sanitizer sanitizer..."
            RUSTFLAGS="-Z sanitizer=$sanitizer" RUSTDOCFLAGS="-Z sanitizer=$sanitizer" cargo +nightly test -Z build-std --target "$TARGET"
          done

  clippy:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0
      - uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0
        with:
          repository: mozilla/neqo
          sparse-checkout: |
            .github/actions/rust
          path: neqo
      - uses: ./neqo/.github/actions/rust
        with:
          components: clippy
          tools: cargo-hack
          token: ${{ secrets.GITHUB_TOKEN }}

      - run: cargo hack clippy --all-targets --feature-powerset -- -D warnings
      - run: cargo doc --workspace --no-deps --document-private-items
        env:
          RUSTDOCFLAGS: "--deny rustdoc::broken_intra_doc_links --deny warnings"

  machete:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0
      - uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0
        with:
          repository: mozilla/neqo
          sparse-checkout: |
            .github/actions/rust
          path: neqo
      - uses: ./neqo/.github/actions/rust
        with:
          tools: cargo-machete
          token: ${{ secrets.GITHUB_TOKEN }}

        #  --with-metadata has false positives, see https://github.com/bnjbvr/cargo-machete/issues/127
      - run: cargo machete

  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0
      - uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0
        with:
          repository: mozilla/neqo
          sparse-checkout: |
            .github/actions/rust
          path: neqo
      - uses: ./neqo/.github/actions/rust
        with:
          version: nightly
          components: rustfmt
          token: ${{ secrets.GITHUB_TOKEN }}

      - run: cargo fmt --all -- --check

  semver:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0
      - uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0
        with:
          repository: mozilla/neqo
          sparse-checkout: |
            .github/actions/rust
          path: neqo
      - uses: ./neqo/.github/actions/rust
        with:
          tools: cargo-semver-checks
          token: ${{ secrets.GITHUB_TOKEN }}

      - run: cargo semver-checks

  check-vm:
    strategy:
      fail-fast: false
      matrix:
        os: [freebsd, openbsd, netbsd] # rust on solaris is too old
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0

      - if: matrix.os == 'freebsd'
        uses: vmactions/freebsd-vm@c96341966a3954a757e6ea41692f7c7b32312a0c
        with:
          usesh: true
          copyback: false
          prepare: |
            mkdir -p /usr/local/etc/pkg/repos
            sed 's/quarterly/latest/' /etc/pkg/FreeBSD.conf > /usr/local/etc/pkg/repos/FreeBSD.conf
            pkg update
            pkg install -y rust
          run: |
            cargo check --all-targets
            RUST_LOG=trace cargo test --no-fail-fast

      - if: matrix.os == 'openbsd'
        uses: vmactions/openbsd-vm@b526dc847c977759bb655a756b14341e85a72e84
        with:
          usesh: true
          copyback: false
          prepare: |
            pkg_add rust
          run: |
            cargo check --all-targets
            RUST_LOG=trace cargo test --no-fail-fast

      - if: matrix.os == 'netbsd'
        uses: vmactions/netbsd-vm@7c9086fdb4cc1aa814cda6e305390c2b966551a9
        with:
          usesh: true
          copyback: false
          prepare: |
            /usr/sbin/pkg_add rust
          run: |
            cargo check --all-targets
            RUST_LOG=trace cargo test --no-fail-fast

      - if: matrix.os == 'solaris'
        uses: vmactions/solaris-vm@a89b9438868c70db27e41625f0a5de6ff5e90809
        with:
          usesh: true
          copyback: false
          prepare: |
            pkg install cargo
          run: |
            cargo check --all-targets
            RUST_LOG=trace cargo test --no-fail-fast
